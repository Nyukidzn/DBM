{
  "name": "user-info",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "xojce",
  "actions": [
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "const blacklisted = member.data(`${server.id}blacklist`);\nif (blacklisted === true) {\n    msg.channel.send(`Sorry ${member.displayName}, You're currently blacklisted from using the bot in this server!`);\n} else {\n    Actions.callNextAction(cache);\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "const moment = this.getWrexMods()\n    .require('moment');\n\nconst prefix = (server && server.tag) || this.getDBM()\n    .Files.data.settings.tag;\nconst text = msg.content.slice(prefix.length)\n    .trim()\n    .split(/ +/g);\ntext.shift();\nlet infoMem;\n\nif (!text || text.length < 1) {\n    infoMem = msg.member;\n} else {\n    infoMem = msg.mentions.members.first() || server.members.find(m => m.id === `${text.join(' ')}`) || server.members.find(m => m.displayName.toUpperCase() === `${text.join(' ').toUpperCase()}`) || server.members.find(m => m.user.username.toUpperCase() === `${text.join(' ').toUpperCase()}`) || server.members.find(m => m.user.username.toLowerCase()\n        .includes(`${text.join(' ').toLowerCase()}`));\n}\n\n(async () => {\n    if (!infoMem) {\n        const f_id = text.join(' ').replace('<@', '').replace('>', '');\n        try {\n            infoMem = await client.fetchUser(f_id);\n        } catch (err) {\n            infoMem = msg.member;\n        }\n    }\n\nlet commands = this.getVariable(3, 'commands', cache);\ncommands = commands += 1;\nthis.storeValue(commands, 3, 'commands', cache);\nthis.getDBM().Files.saveGlobalVariable('commands', commands);\n\n    if (server.member(infoMem)) {\n        const joinPosition = await getJoinPosition(infoMem.id, msg.guild);\n        const ts = moment(infoMem.user.createdAt);\n        const ts2 = moment(infoMem.joinedAt);\n        const ca = ts.format(\"MMM Do, YYYY\");\n        const ja = ts2.format(\"MMM Do, YYYY\");\n        const roles = infoMem.roles.sort((a, b) => b.position - a.position);\n        let roles1 = roles.filter(r => r.id !== msg.guild.id)\n            .array()\n            .join(', ');\n        if (roles1 === undefined || roles1.length == 0) {\n            roles1 = \"No Roles\";\n        }\n        const embed = new DiscordJS.RichEmbed()\n            .setTitle(`${infoMem.user.username}'s Info`)\n            .setColor('RANDOM')\n            .setThumbnail(infoMem.user.displayAvatarURL)\n            .setAuthor(msg.member.displayName, msg.author.displayAvatarURL)\n            .addField('**User Tag**', infoMem.user.tag, true)\n            .addField('**Nickname**', infoMem.displayName, true)\n            .addField('**User ID**', infoMem.id, true)\n            .addField('**Status**', infoMem.user.presence.status, true)\n            .addField('**Joined Server**', ja, true)\n            .addField('**Account Created**', ca, true)\n            .addField('**Join Position**', `${Number(joinPosition)}`, true)\n            .addField('**Roles**', roles1, false);\n        if (me.permissions.has('MANAGE_MESSAGES')) msg.delete();\n        msg.channel.send(embed);\n    } else {\n        //not guild member\n        const ts = moment(infoMem.createdAt);\n        const ca = ts.format(\"MMM Do, YYYY\");\n        const embed = new DiscordJS.RichEmbed()\n            .setTitle(`${infoMem.username}'s Info`)\n            .setColor(\"RANDOM\")\n            .setThumbnail(infoMem.displayAvatarURL)\n            .setAuthor(msg.member.displayName, msg.author.displayAvatarURL)\n            .addField('**User Tag**', infoMem.tag)\n            .addField('**User ID**', infoMem.id)\n            .addField('**Is Bot?**', infoMem.bot)\n            .addField('**Account Created**', ca);\n        if (me.permissions.has('MANAGE_MESSAGES')) msg.delete();\n        msg.channel.send(embed);\n    }\n    async function getJoinPosition(id, guild) {\n        if (!guild.member(id)) return;\n\n        await guild.fetchMembers();\n        const array = guild.members.array();\n        array.sort((a, b) => a.joinedAt - b.joinedAt);\n\n        const result = array.map((m, i) => ({\n                index: i,\n                id: m.user.id\n            }))\n            .find((m) => m.id === id);\n        return (result && result.index) || null;\n    }\n})();",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ],
  "_aliases": [
    "ui",
    "userinfo"
  ]
}